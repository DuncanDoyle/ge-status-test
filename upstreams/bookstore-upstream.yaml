apiVersion: gloo.solo.io/v1
kind: Upstream
metadata:
  name: grpc-bookstore-8080
  namespace: gloo-system
spec:
  discoveryMetadata:
    labels:
      app: bookstore
  kube:
    selector:
      app: bookstore
    serviceName: bookstore
    serviceNamespace: default
    servicePort: 8080
    serviceSpec:
      grpcJsonTranscoder:
        protoDescriptorBin: 
        services:
        - main.Bookstore
  useHttp2: true